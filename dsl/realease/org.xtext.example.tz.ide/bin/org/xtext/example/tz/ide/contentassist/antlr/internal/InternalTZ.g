/*
 * generated by Xtext 2.10.0
 */
grammar InternalTZ;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.tz.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.tz.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.tz.services.TZGrammarAccess;

}
@parser::members {
	private TZGrammarAccess grammarAccess;

	public void setGrammarAccess(TZGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTZVISOR
entryRuleTZVISOR
:
{ before(grammarAccess.getTZVISORRule()); }
	 ruleTZVISOR
{ after(grammarAccess.getTZVISORRule()); } 
	 EOF 
;

// Rule TZVISOR
ruleTZVISOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTZVISORAccess().getGroup()); }
		(rule__TZVISOR__Group__0)
		{ after(grammarAccess.getTZVISORAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMODULE
entryRuleMODULE
:
{ before(grammarAccess.getMODULERule()); }
	 ruleMODULE
{ after(grammarAccess.getMODULERule()); } 
	 EOF 
;

// Rule MODULE
ruleMODULE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMODULEAccess().getGroup()); }
		(rule__MODULE__Group__0)
		{ after(grammarAccess.getMODULEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLABEL
entryRuleLABEL
:
{ before(grammarAccess.getLABELRule()); }
	 ruleLABEL
{ after(grammarAccess.getLABELRule()); } 
	 EOF 
;

// Rule LABEL
ruleLABEL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLABELAccess().getGroup()); }
		(rule__LABEL__Group__0)
		{ after(grammarAccess.getLABELAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONSTANT
entryRuleCONSTANT
:
{ before(grammarAccess.getCONSTANTRule()); }
	 ruleCONSTANT
{ after(grammarAccess.getCONSTANTRule()); } 
	 EOF 
;

// Rule CONSTANT
ruleCONSTANT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONSTANTAccess().getGroup()); }
		(rule__CONSTANT__Group__0)
		{ after(grammarAccess.getCONSTANTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVARIABLES
entryRuleVARIABLES
:
{ before(grammarAccess.getVARIABLESRule()); }
	 ruleVARIABLES
{ after(grammarAccess.getVARIABLESRule()); } 
	 EOF 
;

// Rule VARIABLES
ruleVARIABLES 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVARIABLESAccess().getAlternatives()); }
		(rule__VARIABLES__Alternatives)
		{ after(grammarAccess.getVARIABLESAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getModuleAssignment_0_0()); }
		(rule__Model__ModuleAssignment_0_0)
		{ after(grammarAccess.getModelAccess().getModuleAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getConstantAssignment_0_1()); }
		(rule__Model__ConstantAssignment_0_1)
		{ after(grammarAccess.getModelAccess().getConstantAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTZVISORAccess().getVariablesAssignment_3_0()); }
		(rule__TZVISOR__VariablesAssignment_3_0)
		{ after(grammarAccess.getTZVISORAccess().getVariablesAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getTZVISORAccess().getConstantAssignment_3_1()); }
		(rule__TZVISOR__ConstantAssignment_3_1)
		{ after(grammarAccess.getTZVISORAccess().getConstantAssignment_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getTZVISORAccess().getModuleAssignment_3_2()); }
		(rule__TZVISOR__ModuleAssignment_3_2)
		{ after(grammarAccess.getTZVISORAccess().getModuleAssignment_3_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMODULEAccess().getSBOOTKeyword_0_0()); }
		'SBOOT'
		{ after(grammarAccess.getMODULEAccess().getSBOOTKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMODULEAccess().getIPCKeyword_0_1()); }
		'IPC'
		{ after(grammarAccess.getMODULEAccess().getIPCKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMODULEAccess().getDFIKeyword_0_2()); }
		'DFI'
		{ after(grammarAccess.getMODULEAccess().getDFIKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMODULEAccess().getCFIKeyword_0_3()); }
		'CFI'
		{ after(grammarAccess.getMODULEAccess().getCFIKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getMODULEAccess().getHMKeyword_0_4()); }
		'HM'
		{ after(grammarAccess.getMODULEAccess().getHMKeyword_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMODULEAccess().getLabelAssignment_3_0()); }
		(rule__MODULE__LabelAssignment_3_0)*
		{ after(grammarAccess.getMODULEAccess().getLabelAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getMODULEAccess().getSuperTypeAssignment_3_1()); }
		(rule__MODULE__SuperTypeAssignment_3_1)*
		{ after(grammarAccess.getMODULEAccess().getSuperTypeAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLABELAccess().getINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getLABELAccess().getINTTerminalRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getLABELAccess().getSuperTypeAssignment_2_1()); }
		(rule__LABEL__SuperTypeAssignment_2_1)
		{ after(grammarAccess.getLABELAccess().getSuperTypeAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLES__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVARIABLESAccess().getSuperTypeAssignment_0()); }
		(rule__VARIABLES__SuperTypeAssignment_0)
		{ after(grammarAccess.getVARIABLESAccess().getSuperTypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getVARIABLESAccess().getGroup_1()); }
		(rule__VARIABLES__Group_1__0)
		{ after(grammarAccess.getVARIABLESAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getAlternatives_0()); }
	(rule__Model__Alternatives_0)*
	{ after(grammarAccess.getModelAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getTzvisorAssignment_1()); }
		(rule__Model__TzvisorAssignment_1)
		{ after(grammarAccess.getModelAccess().getTzvisorAssignment_1()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getTzvisorAssignment_1()); }
		(rule__Model__TzvisorAssignment_1)*
		{ after(grammarAccess.getModelAccess().getTzvisorAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TZVISOR__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TZVISOR__Group__0__Impl
	rule__TZVISOR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTZVISORAccess().getTZVISORKeyword_0()); }
	'TZVISOR'
	{ after(grammarAccess.getTZVISORAccess().getTZVISORKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TZVISOR__Group__1__Impl
	rule__TZVISOR__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTZVISORAccess().getNameAssignment_1()); }
	(rule__TZVISOR__NameAssignment_1)
	{ after(grammarAccess.getTZVISORAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TZVISOR__Group__2__Impl
	rule__TZVISOR__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTZVISORAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTZVISORAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TZVISOR__Group__3__Impl
	rule__TZVISOR__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTZVISORAccess().getAlternatives_3()); }
		(rule__TZVISOR__Alternatives_3)
		{ after(grammarAccess.getTZVISORAccess().getAlternatives_3()); }
	)
	(
		{ before(grammarAccess.getTZVISORAccess().getAlternatives_3()); }
		(rule__TZVISOR__Alternatives_3)*
		{ after(grammarAccess.getTZVISORAccess().getAlternatives_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TZVISOR__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTZVISORAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTZVISORAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MODULE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MODULE__Group__0__Impl
	rule__MODULE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMODULEAccess().getAlternatives_0()); }
	(rule__MODULE__Alternatives_0)
	{ after(grammarAccess.getMODULEAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MODULE__Group__1__Impl
	rule__MODULE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMODULEAccess().getNameAssignment_1()); }
	(rule__MODULE__NameAssignment_1)
	{ after(grammarAccess.getMODULEAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MODULE__Group__2__Impl
	rule__MODULE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMODULEAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMODULEAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MODULE__Group__3__Impl
	rule__MODULE__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMODULEAccess().getAlternatives_3()); }
	(rule__MODULE__Alternatives_3)
	{ after(grammarAccess.getMODULEAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MODULE__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMODULEAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getMODULEAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LABEL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LABEL__Group__0__Impl
	rule__LABEL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLABELAccess().getNameAssignment_0()); }
	(rule__LABEL__NameAssignment_0)
	{ after(grammarAccess.getLABELAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LABEL__Group__1__Impl
	rule__LABEL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLABELAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getLABELAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LABEL__Group__2__Impl
	rule__LABEL__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLABELAccess().getAlternatives_2()); }
	(rule__LABEL__Alternatives_2)
	{ after(grammarAccess.getLABELAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LABEL__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLABELAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getLABELAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CONSTANT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CONSTANT__Group__0__Impl
	rule__CONSTANT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CONSTANT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCONSTANTAccess().getCONSTKeyword_0()); }
	'CONST'
	{ after(grammarAccess.getCONSTANTAccess().getCONSTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CONSTANT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CONSTANT__Group__1__Impl
	rule__CONSTANT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CONSTANT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCONSTANTAccess().getNameAssignment_1()); }
	(rule__CONSTANT__NameAssignment_1)
	{ after(grammarAccess.getCONSTANTAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CONSTANT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CONSTANT__Group__2__Impl
	rule__CONSTANT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CONSTANT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCONSTANTAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getCONSTANTAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CONSTANT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CONSTANT__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CONSTANT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCONSTANTAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getCONSTANTAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VARIABLES__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VARIABLES__Group_1__0__Impl
	rule__VARIABLES__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLES__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVARIABLESAccess().getSuperTypeAssignment_1_0()); }
	(rule__VARIABLES__SuperTypeAssignment_1_0)
	{ after(grammarAccess.getVARIABLESAccess().getSuperTypeAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLES__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VARIABLES__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLES__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVARIABLESAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getVARIABLESAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ModuleAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getModuleMODULEParserRuleCall_0_0_0()); }
		ruleMODULE
		{ after(grammarAccess.getModelAccess().getModuleMODULEParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ConstantAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstantCONSTANTParserRuleCall_0_1_0()); }
		ruleCONSTANT
		{ after(grammarAccess.getModelAccess().getConstantCONSTANTParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TzvisorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTzvisorTZVISORParserRuleCall_1_0()); }
		ruleTZVISOR
		{ after(grammarAccess.getModelAccess().getTzvisorTZVISORParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTZVISORAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTZVISORAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__VariablesAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTZVISORAccess().getVariablesVARIABLESParserRuleCall_3_0_0()); }
		ruleVARIABLES
		{ after(grammarAccess.getTZVISORAccess().getVariablesVARIABLESParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__ConstantAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTZVISORAccess().getConstantCONSTANTParserRuleCall_3_1_0()); }
		ruleCONSTANT
		{ after(grammarAccess.getTZVISORAccess().getConstantCONSTANTParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TZVISOR__ModuleAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTZVISORAccess().getModuleMODULEParserRuleCall_3_2_0()); }
		ruleMODULE
		{ after(grammarAccess.getTZVISORAccess().getModuleMODULEParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMODULEAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMODULEAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__LabelAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMODULEAccess().getLabelLABELParserRuleCall_3_0_0()); }
		ruleLABEL
		{ after(grammarAccess.getMODULEAccess().getLabelLABELParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MODULE__SuperTypeAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMODULEAccess().getSuperTypeLABELCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getMODULEAccess().getSuperTypeLABELIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMODULEAccess().getSuperTypeLABELIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getMODULEAccess().getSuperTypeLABELCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLABELAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getLABELAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LABEL__SuperTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLABELAccess().getSuperTypeCONSTANTCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getLABELAccess().getSuperTypeCONSTANTIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getLABELAccess().getSuperTypeCONSTANTIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getLABELAccess().getSuperTypeCONSTANTCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CONSTANT__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCONSTANTAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCONSTANTAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLES__SuperTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVARIABLESAccess().getSuperTypeCONSTANTCrossReference_0_0()); }
		(
			{ before(grammarAccess.getVARIABLESAccess().getSuperTypeCONSTANTIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVARIABLESAccess().getSuperTypeCONSTANTIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getVARIABLESAccess().getSuperTypeCONSTANTCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLES__SuperTypeAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVARIABLESAccess().getSuperTypeMODULECrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getVARIABLESAccess().getSuperTypeMODULEIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVARIABLESAccess().getSuperTypeMODULEIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getVARIABLESAccess().getSuperTypeMODULECrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
