/*
 * generated by Xtext 2.10.0
 */
grammar InternalTZ;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.tz.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.tz.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.tz.services.TZGrammarAccess;

}

@parser::members {

 	private TZGrammarAccess grammarAccess;

    public InternalTZParser(TokenStream input, TZGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TZGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getModuleMODULEParserRuleCall_0_0_0());
					}
					lv_module_0_0=ruleMODULE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"module",
							lv_module_0_0,
							"org.xtext.example.tz.TZ.MODULE");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getConstantCONSTANTParserRuleCall_0_1_0());
					}
					lv_constant_1_0=ruleCONSTANT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"constant",
							lv_constant_1_0,
							"org.xtext.example.tz.TZ.CONSTANT");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTzvisorTZVISORParserRuleCall_1_0());
				}
				lv_tzvisor_2_0=ruleTZVISOR
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"tzvisor",
						lv_tzvisor_2_0,
						"org.xtext.example.tz.TZ.TZVISOR");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleTZVISOR
entryRuleTZVISOR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTZVISORRule()); }
	iv_ruleTZVISOR=ruleTZVISOR
	{ $current=$iv_ruleTZVISOR.current; }
	EOF;

// Rule TZVISOR
ruleTZVISOR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TZVISOR'
		{
			newLeafNode(otherlv_0, grammarAccess.getTZVISORAccess().getTZVISORKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTZVISORAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTZVISORRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTZVISORAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTZVISORAccess().getVariablesVARIABLESParserRuleCall_3_0_0());
					}
					lv_variables_3_0=ruleVARIABLES
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTZVISORRule());
						}
						add(
							$current,
							"variables",
							lv_variables_3_0,
							"org.xtext.example.tz.TZ.VARIABLES");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTZVISORAccess().getConstantCONSTANTParserRuleCall_3_1_0());
					}
					lv_constant_4_0=ruleCONSTANT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTZVISORRule());
						}
						add(
							$current,
							"constant",
							lv_constant_4_0,
							"org.xtext.example.tz.TZ.CONSTANT");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTZVISORAccess().getModuleMODULEParserRuleCall_3_2_0());
					}
					lv_module_5_0=ruleMODULE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTZVISORRule());
						}
						add(
							$current,
							"module",
							lv_module_5_0,
							"org.xtext.example.tz.TZ.MODULE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTZVISORAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMODULE
entryRuleMODULE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMODULERule()); }
	iv_ruleMODULE=ruleMODULE
	{ $current=$iv_ruleMODULE.current; }
	EOF;

// Rule MODULE
ruleMODULE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='SBOOT'
			{
				newLeafNode(otherlv_0, grammarAccess.getMODULEAccess().getSBOOTKeyword_0_0());
			}
			    |
			otherlv_1='IPC'
			{
				newLeafNode(otherlv_1, grammarAccess.getMODULEAccess().getIPCKeyword_0_1());
			}
			    |
			otherlv_2='DFI'
			{
				newLeafNode(otherlv_2, grammarAccess.getMODULEAccess().getDFIKeyword_0_2());
			}
			    |
			otherlv_3='CFI'
			{
				newLeafNode(otherlv_3, grammarAccess.getMODULEAccess().getCFIKeyword_0_3());
			}
			    |
			otherlv_4='HM'
			{
				newLeafNode(otherlv_4, grammarAccess.getMODULEAccess().getHMKeyword_0_4());
			}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getMODULEAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMODULERule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getMODULEAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMODULEAccess().getLabelLABELParserRuleCall_3_0_0());
					}
					lv_label_7_0=ruleLABEL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMODULERule());
						}
						add(
							$current,
							"label",
							lv_label_7_0,
							"org.xtext.example.tz.TZ.LABEL");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMODULERule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getMODULEAccess().getSuperTypeLABELCrossReference_3_1_0());
					}
				)
			)*
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getMODULEAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleLABEL
entryRuleLABEL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLABELRule()); }
	iv_ruleLABEL=ruleLABEL
	{ $current=$iv_ruleLABEL.current; }
	EOF;

// Rule LABEL
ruleLABEL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLABELAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLABELRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLABELAccess().getColonKeyword_1());
		}
		(
			this_INT_2=RULE_INT
			{
				newLeafNode(this_INT_2, grammarAccess.getLABELAccess().getINTTerminalRuleCall_2_0());
			}
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLABELRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getLABELAccess().getSuperTypeCONSTANTCrossReference_2_1_0());
					}
				)
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getLABELAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleCONSTANT
entryRuleCONSTANT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCONSTANTRule()); }
	iv_ruleCONSTANT=ruleCONSTANT
	{ $current=$iv_ruleCONSTANT.current; }
	EOF;

// Rule CONSTANT
ruleCONSTANT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CONST'
		{
			newLeafNode(otherlv_0, grammarAccess.getCONSTANTAccess().getCONSTKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCONSTANTAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCONSTANTRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_INT_2=RULE_INT
		{
			newLeafNode(this_INT_2, grammarAccess.getCONSTANTAccess().getINTTerminalRuleCall_2());
		}
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getCONSTANTAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleVARIABLES
entryRuleVARIABLES returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVARIABLESRule()); }
	iv_ruleVARIABLES=ruleVARIABLES
	{ $current=$iv_ruleVARIABLES.current; }
	EOF;

// Rule VARIABLES
ruleVARIABLES returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVARIABLESRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getVARIABLESAccess().getSuperTypeCONSTANTCrossReference_0_0());
				}
			)
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVARIABLESRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getVARIABLESAccess().getSuperTypeMODULECrossReference_1_0_0());
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getVARIABLESAccess().getSemicolonKeyword_1_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
