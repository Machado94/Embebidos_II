/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.tz.tZ.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.tz.tZ.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TZFactoryImpl extends EFactoryImpl implements TZFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TZFactory init()
  {
    try
    {
      TZFactory theTZFactory = (TZFactory)EPackage.Registry.INSTANCE.getEFactory(TZPackage.eNS_URI);
      if (theTZFactory != null)
      {
        return theTZFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TZFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TZFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TZPackage.MODEL: return createModel();
      case TZPackage.TZ_VISOR: return createTZVISOR();
      case TZPackage.MODULE: return createMODULE();
      case TZPackage.LABEL: return createLABEL();
      case TZPackage.CONSTANT: return createCONSTANT();
      case TZPackage.VARIABLES: return createVARIABLES();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TZVISOR createTZVISOR()
  {
    TZVISORImpl tzvisor = new TZVISORImpl();
    return tzvisor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MODULE createMODULE()
  {
    MODULEImpl module = new MODULEImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LABEL createLABEL()
  {
    LABELImpl label = new LABELImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CONSTANT createCONSTANT()
  {
    CONSTANTImpl constant = new CONSTANTImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VARIABLES createVARIABLES()
  {
    VARIABLESImpl variables = new VARIABLESImpl();
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TZPackage getTZPackage()
  {
    return (TZPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TZPackage getPackage()
  {
    return TZPackage.eINSTANCE;
  }

} //TZFactoryImpl
