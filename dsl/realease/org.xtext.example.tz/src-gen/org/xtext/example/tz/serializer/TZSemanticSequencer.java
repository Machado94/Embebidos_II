/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.tz.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.tz.services.TZGrammarAccess;
import org.xtext.example.tz.tZ.CONSTANT;
import org.xtext.example.tz.tZ.LABEL;
import org.xtext.example.tz.tZ.MODULE;
import org.xtext.example.tz.tZ.Model;
import org.xtext.example.tz.tZ.TZPackage;
import org.xtext.example.tz.tZ.TZVISOR;
import org.xtext.example.tz.tZ.VARIABLES;

@SuppressWarnings("all")
public class TZSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TZGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TZPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TZPackage.CONSTANT:
				sequence_CONSTANT(context, (CONSTANT) semanticObject); 
				return; 
			case TZPackage.LABEL:
				sequence_LABEL(context, (LABEL) semanticObject); 
				return; 
			case TZPackage.MODULE:
				sequence_MODULE(context, (MODULE) semanticObject); 
				return; 
			case TZPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TZPackage.TZ_VISOR:
				sequence_TZVISOR(context, (TZVISOR) semanticObject); 
				return; 
			case TZPackage.VARIABLES:
				sequence_VARIABLES(context, (VARIABLES) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CONSTANT returns CONSTANT
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_CONSTANT(ISerializationContext context, CONSTANT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TZPackage.Literals.CONSTANT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TZPackage.Literals.CONSTANT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCONSTANTAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LABEL returns LABEL
	 *
	 * Constraint:
	 *     (name=ID superType=[CONSTANT|ID]?)
	 */
	protected void sequence_LABEL(ISerializationContext context, LABEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MODULE returns MODULE
	 *
	 * Constraint:
	 *     (name=ID (label+=LABEL+ | superType=[LABEL|ID]+)?)
	 */
	protected void sequence_MODULE(ISerializationContext context, MODULE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((module+=MODULE | constant+=CONSTANT)* tzvisor+=TZVISOR+)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TZVISOR returns TZVISOR
	 *
	 * Constraint:
	 *     (name=ID (variables+=VARIABLES | constant+=CONSTANT | module+=MODULE)+)
	 */
	protected void sequence_TZVISOR(ISerializationContext context, TZVISOR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VARIABLES returns VARIABLES
	 *
	 * Constraint:
	 *     (superType=[CONSTANT|ID] | superType=[MODULE|ID])
	 */
	protected void sequence_VARIABLES(ISerializationContext context, VARIABLES semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
