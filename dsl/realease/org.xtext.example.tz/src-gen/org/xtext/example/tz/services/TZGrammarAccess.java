/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.tz.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TZGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tz.TZ.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cModuleMODULEParserRuleCall_0_0_0 = (RuleCall)cModuleAssignment_0_0.eContents().get(0);
		private final Assignment cConstantAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cConstantCONSTANTParserRuleCall_0_1_0 = (RuleCall)cConstantAssignment_0_1.eContents().get(0);
		private final Assignment cTzvisorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTzvisorTZVISORParserRuleCall_1_0 = (RuleCall)cTzvisorAssignment_1.eContents().get(0);
		
		//Model:
		//	(module+=MODULE | constant+=CONSTANT)*
		//	tzvisor+=TZVISOR+;
		@Override public ParserRule getRule() { return rule; }
		
		//(module+=MODULE | constant+=CONSTANT)* tzvisor+=TZVISOR+
		public Group getGroup() { return cGroup; }
		
		//(module+=MODULE | constant+=CONSTANT)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//module+=MODULE
		public Assignment getModuleAssignment_0_0() { return cModuleAssignment_0_0; }
		
		//MODULE
		public RuleCall getModuleMODULEParserRuleCall_0_0_0() { return cModuleMODULEParserRuleCall_0_0_0; }
		
		//constant+=CONSTANT
		public Assignment getConstantAssignment_0_1() { return cConstantAssignment_0_1; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTParserRuleCall_0_1_0() { return cConstantCONSTANTParserRuleCall_0_1_0; }
		
		//tzvisor+=TZVISOR+
		public Assignment getTzvisorAssignment_1() { return cTzvisorAssignment_1; }
		
		//TZVISOR
		public RuleCall getTzvisorTZVISORParserRuleCall_1_0() { return cTzvisorTZVISORParserRuleCall_1_0; }
	}
	public class TZVISORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tz.TZ.TZVISOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTZVISORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cVariablesVARIABLESParserRuleCall_3_0_0 = (RuleCall)cVariablesAssignment_3_0.eContents().get(0);
		private final Assignment cConstantAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cConstantCONSTANTParserRuleCall_3_1_0 = (RuleCall)cConstantAssignment_3_1.eContents().get(0);
		private final Assignment cModuleAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cModuleMODULEParserRuleCall_3_2_0 = (RuleCall)cModuleAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TZVISOR:
		//	'TZVISOR' name=ID '{' (variables+=VARIABLES | constant+=CONSTANT | module+=MODULE)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TZVISOR' name=ID '{' (variables+=VARIABLES | constant+=CONSTANT | module+=MODULE)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'TZVISOR'
		public Keyword getTZVISORKeyword_0() { return cTZVISORKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(variables+=VARIABLES | constant+=CONSTANT | module+=MODULE)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//variables+=VARIABLES
		public Assignment getVariablesAssignment_3_0() { return cVariablesAssignment_3_0; }
		
		//VARIABLES
		public RuleCall getVariablesVARIABLESParserRuleCall_3_0_0() { return cVariablesVARIABLESParserRuleCall_3_0_0; }
		
		//constant+=CONSTANT
		public Assignment getConstantAssignment_3_1() { return cConstantAssignment_3_1; }
		
		//CONSTANT
		public RuleCall getConstantCONSTANTParserRuleCall_3_1_0() { return cConstantCONSTANTParserRuleCall_3_1_0; }
		
		//module+=MODULE
		public Assignment getModuleAssignment_3_2() { return cModuleAssignment_3_2; }
		
		//MODULE
		public RuleCall getModuleMODULEParserRuleCall_3_2_0() { return cModuleMODULEParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MODULEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tz.TZ.MODULE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSBOOTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIPCKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cDFIKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cCFIKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cHMKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cLabelLABELParserRuleCall_3_0_0 = (RuleCall)cLabelAssignment_3_0.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cSuperTypeLABELCrossReference_3_1_0 = (CrossReference)cSuperTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypeLABELIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperTypeLABELCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MODULE:
		//	('SBOOT' | 'IPC' | 'DFI' | 'CFI' | 'HM') name=ID '{' (label+=LABEL* | superType=[LABEL]*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//('SBOOT' | 'IPC' | 'DFI' | 'CFI' | 'HM') name=ID '{' (label+=LABEL* | superType=[LABEL]*) '}'
		public Group getGroup() { return cGroup; }
		
		//('SBOOT' | 'IPC' | 'DFI' | 'CFI' | 'HM')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'SBOOT'
		public Keyword getSBOOTKeyword_0_0() { return cSBOOTKeyword_0_0; }
		
		//'IPC'
		public Keyword getIPCKeyword_0_1() { return cIPCKeyword_0_1; }
		
		//'DFI'
		public Keyword getDFIKeyword_0_2() { return cDFIKeyword_0_2; }
		
		//'CFI'
		public Keyword getCFIKeyword_0_3() { return cCFIKeyword_0_3; }
		
		//'HM'
		public Keyword getHMKeyword_0_4() { return cHMKeyword_0_4; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(label+=LABEL* | superType=[LABEL]*)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//label+=LABEL*
		public Assignment getLabelAssignment_3_0() { return cLabelAssignment_3_0; }
		
		//LABEL
		public RuleCall getLabelLABELParserRuleCall_3_0_0() { return cLabelLABELParserRuleCall_3_0_0; }
		
		//superType=[LABEL]*
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }
		
		//[LABEL]
		public CrossReference getSuperTypeLABELCrossReference_3_1_0() { return cSuperTypeLABELCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSuperTypeLABELIDTerminalRuleCall_3_1_0_1() { return cSuperTypeLABELIDTerminalRuleCall_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LABELElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tz.TZ.LABEL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cSuperTypeCONSTANTCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeCONSTANTIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeCONSTANTCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LABEL:
		//	name=ID ':' (INT | superType=[CONSTANT]) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (INT | superType=[CONSTANT]) ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(INT | superType=[CONSTANT])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//superType=[CONSTANT]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[CONSTANT]
		public CrossReference getSuperTypeCONSTANTCrossReference_2_1_0() { return cSuperTypeCONSTANTCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeCONSTANTIDTerminalRuleCall_2_1_0_1() { return cSuperTypeCONSTANTIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CONSTANTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tz.TZ.CONSTANT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CONSTANT:
		//	'CONST' name=ID INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'CONST' name=ID INT ';'
		public Group getGroup() { return cGroup; }
		
		//'CONST'
		public Keyword getCONSTKeyword_0() { return cCONSTKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VARIABLESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tz.TZ.VARIABLES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSuperTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cSuperTypeCONSTANTCrossReference_0_0 = (CrossReference)cSuperTypeAssignment_0.eContents().get(0);
		private final RuleCall cSuperTypeCONSTANTIDTerminalRuleCall_0_0_1 = (RuleCall)cSuperTypeCONSTANTCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSuperTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cSuperTypeMODULECrossReference_1_0_0 = (CrossReference)cSuperTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cSuperTypeMODULEIDTerminalRuleCall_1_0_0_1 = (RuleCall)cSuperTypeMODULECrossReference_1_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//VARIABLES:
		//	superType=[CONSTANT] | superType=[MODULE] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//superType=[CONSTANT] | superType=[MODULE] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//superType=[CONSTANT]
		public Assignment getSuperTypeAssignment_0() { return cSuperTypeAssignment_0; }
		
		//[CONSTANT]
		public CrossReference getSuperTypeCONSTANTCrossReference_0_0() { return cSuperTypeCONSTANTCrossReference_0_0; }
		
		//ID
		public RuleCall getSuperTypeCONSTANTIDTerminalRuleCall_0_0_1() { return cSuperTypeCONSTANTIDTerminalRuleCall_0_0_1; }
		
		//superType=[MODULE] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//superType=[MODULE]
		public Assignment getSuperTypeAssignment_1_0() { return cSuperTypeAssignment_1_0; }
		
		//[MODULE]
		public CrossReference getSuperTypeMODULECrossReference_1_0_0() { return cSuperTypeMODULECrossReference_1_0_0; }
		
		//ID
		public RuleCall getSuperTypeMODULEIDTerminalRuleCall_1_0_0_1() { return cSuperTypeMODULEIDTerminalRuleCall_1_0_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final TZVISORElements pTZVISOR;
	private final MODULEElements pMODULE;
	private final LABELElements pLABEL;
	private final CONSTANTElements pCONSTANT;
	private final VARIABLESElements pVARIABLES;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TZGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTZVISOR = new TZVISORElements();
		this.pMODULE = new MODULEElements();
		this.pLABEL = new LABELElements();
		this.pCONSTANT = new CONSTANTElements();
		this.pVARIABLES = new VARIABLESElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.tz.TZ".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(module+=MODULE | constant+=CONSTANT)*
	//	tzvisor+=TZVISOR+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TZVISOR:
	//	'TZVISOR' name=ID '{' (variables+=VARIABLES | constant+=CONSTANT | module+=MODULE)+
	//	'}';
	public TZVISORElements getTZVISORAccess() {
		return pTZVISOR;
	}
	
	public ParserRule getTZVISORRule() {
		return getTZVISORAccess().getRule();
	}
	
	//MODULE:
	//	('SBOOT' | 'IPC' | 'DFI' | 'CFI' | 'HM') name=ID '{' (label+=LABEL* | superType=[LABEL]*)
	//	'}';
	public MODULEElements getMODULEAccess() {
		return pMODULE;
	}
	
	public ParserRule getMODULERule() {
		return getMODULEAccess().getRule();
	}
	
	//LABEL:
	//	name=ID ':' (INT | superType=[CONSTANT]) ';';
	public LABELElements getLABELAccess() {
		return pLABEL;
	}
	
	public ParserRule getLABELRule() {
		return getLABELAccess().getRule();
	}
	
	//CONSTANT:
	//	'CONST' name=ID INT ';';
	public CONSTANTElements getCONSTANTAccess() {
		return pCONSTANT;
	}
	
	public ParserRule getCONSTANTRule() {
		return getCONSTANTAccess().getRule();
	}
	
	//VARIABLES:
	//	superType=[CONSTANT] | superType=[MODULE] ';';
	public VARIABLESElements getVARIABLESAccess() {
		return pVARIABLES;
	}
	
	public ParserRule getVARIABLESRule() {
		return getVARIABLESAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
